{
  "name": "Homeland",
  "tagline": "以 Rails Engine 的方式的嵌入式论坛组件",
  "body": "Homeland\r\n--------\r\n\r\n[![Gem Version](https://badge.fury.io/rb/homeland.svg)](https://badge.fury.io/rb/homeland) [![Build Status](https://travis-ci.org/huacnlee/homeland.svg)](https://travis-ci.org/huacnlee/homeland) [![Code Climate](https://codeclimate.com/github/huacnlee/homeland/badges/gpa.svg)](https://codeclimate.com/github/huacnlee/homeland) [![codecov.io](https://codecov.io/github/huacnlee/homeland/coverage.svg?branch=master)](https://codecov.io/github/huacnlee/homeland?branch=master)\r\n\r\n> A new style forum for tiny community as Rails Engine. You can mount this in any of you Rails apps.\r\n\r\n我们时常可能需要在各类中小型项目中集成用户社区之类的功能，每次当你需要做这个事情的时候都重头设计实现一遍么？ No, that no the Rails way! Rails 教育我们要 DRY!\r\n\r\nHomeland 是基于 Rails Engine 实现的论坛社区 Gem，用于快速开发，类似 Devise 给我们解决账号体系的方案一样。它包含数据库、Model、Controller、Views 以及 UI 细节的完整实现，你只需简单几行就能快速在你的现有项目上面集成起来。\r\n\r\n## 功能列表\r\n\r\n- 分类管理\r\n- 话题发布，管理\r\n- 回帖\r\n\r\n## 系统依赖\r\n\r\n由于内部包含较多复杂功能，Homeland 不得不需要依赖一些三方库，Homeland 尽可能的选用 Ruby 社区流行的 Gem，保持较小的版本依赖。\r\n\r\n建议你使用的时候选择目前 `homeland.gemspec` 里面描述的最佳的三方库版本号。\r\n\r\n### 下面是几个基本的\r\n\r\n- Rails 4.2.x +\r\n- ActiveRecord 4.2.x +\r\n- Bootstrap 4 Alpha (当然如果你重写 View 可以不管它)\r\n\r\n## 安装\r\n\r\n仅仅需要几步，就能集成到你的任何应用（当然我说的是 Rails + ActiveRecord 的！）。\r\n\r\n> [提示]: Homeland 的默认配置是增对 Devise 设计的，你可以从配置文件里面看到，很多参数都是 Devise 的默认值。所以我建议大家尽可能的使用 Devise 来配合（如果情况允许的话），否则你需要实现一些必要的参数，详见后面的配置文件说明。\r\n\r\n1. 修改 Gemfile 增加:\r\n\r\n```ruby\r\n# Gemfile\r\ngem \"homeland\"\r\ngem 'font-awesome-sass-rails'\r\n# 如果你用其他 markup 可以不用依赖 github-markup\r\ngem 'github-markup'\r\n```\r\n\r\n然后直接 `bundle install` 安装好.\r\n\r\n2. 生成 Homeland 的基本配置文件：\r\n\r\n```bash\r\n$ rails g homeland:install\r\n```\r\n\r\n3. 在 routes.rb 里面 mount Homeland:\r\n\r\n```ruby\r\n# config/routes.rb\r\nmount Homeland::Engine, at: \"/homeland\"\r\n```\r\n\r\n4. 自定义配置\r\n\r\n```ruby\r\n# config/initializes/homeland.rb\r\n# Homeland Config\r\nHomeland.configure do\r\n  # 正文格式化方式, [:markdown, :plain, :html], 默认: :markdown\r\n  # self.markup = :markdown\r\n\r\n  # 应用名称\r\n  # self.app_name = 'Homeland'\r\n\r\n  # 分页每页条数\r\n  # self.per_page = 32\r\n\r\n  # 重要！用户 Model 的 Model 名称, 默认: 'User'\r\n  # self.user_class = 'User'\r\n\r\n  # 在 User model 里面表示用户姓名、昵称的函数名称。\r\n  # 用于 Homeland 页面显示发帖回帖人名称, 默认: 'name'\r\n  # 例如:\r\n  # class User\r\n  #   def name\r\n  #     self.email.split('@').first\r\n  #   end\r\n  # end\r\n  # self.user_name_method = 'name'\r\n\r\n  # 在 User model 里面，用户头像 URL 的函数名称，默认: nil\r\n  # 当这个参数 nil 的时候，我们会用一个默认头像在页面上显示\r\n  # 关于尺寸，请给至少 64x64 以上\r\n  # self.user_avatar_url_method = nil\r\n\r\n  # 在 User model 里面，检测用户是否有 Homeland 管理权限的函数，默认: 'admin?'\r\n  # 此函数目的是为了告诉 Homeland，此用户是否可以管理论坛的回帖发帖，请返回 true, false\r\n  # self.user_admin_method = 'admin?'\r\n\r\n  # 在 User model 里面提供用户个人页面 URL（用于页面上点击用户名、头像的目标页面）\r\n  # 默认: 'profile_url'\r\n  # self.user_profile_url_method = 'profile_url'\r\n\r\n  # 在 Controller 里面，检查限制必须登录的函数（参见 Devise 的 authenticate_user! 方法）\r\n  # 默认: 'authenticate_user!'\r\n  # 此方法要求检查用户是否登录，未登录跳转到登录页面\r\n  # self.authenticate_user_method = 'authenticate_user!'\r\n\r\n  # 在 Controller 里面，获取当前用户对象的函数（参加 Devise 的 current_user 方法)\r\n  # 默认: 'current_user'\r\n  # 要求这个函数返回一个 User 对象\r\n  # self.current_user_method = 'current_user'\r\nend\r\n\r\n```\r\n\r\n### 如果你有更高级的需要，可以直接生成出 Homeland 的 Model, Controller, View 文件，然后按自己的需要定制：\r\n\r\n```bash\r\n$ rails g homeland:models\r\n$ rails g homeland:controllers\r\n$ rails g homeland:views\r\n```\r\n\r\n你也可以通过下面的命令生成默认的 I18n 文件\r\n\r\n```bash\r\n$ rails g homeland:i18n\r\n```\r\n\r\n## 实现自己的文章内容格式化\r\n\r\nHomeland 默认提供: [:markdown, :simple, :html] 几种可选的内容格式化方式，但某些时候你可能会有更多的需求，需要按自己的需要定制。\r\n\r\nHomeland 提供的方式让你达到这个目的。\r\n\r\n你需要在 `Homeland::Markup` 命名空间下面实现一个新的自定义类，并继承 `Homeland::Markup::Base`，实现 `render` 函数，例如：\r\n\r\n新建文件 lib/homeland/markup/ruby_china.rb\r\n\r\n```ruby\r\nmodule Homeland\r\n  module Markup\r\n    class RubyChina < Base\r\n      class << self\r\n        def render(raw)\r\n          # 在这里编写你的详细转换实现\r\n          YouCustomRender.render(raw)\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n需改 config/initializes/homeland.rb\r\n\r\n```ruby\r\nHomeland.configure do\r\n  self.markup = :ruby_china\r\nend\r\n```\r\n\r\n然后，Homeland 在转换格式的时候，就会用你的自定义 Markup 来处理了。\r\n\r\n## Demo App\r\n\r\n![2016-03-24 15 27 27](https://cloud.githubusercontent.com/assets/5518/14011062/4ca58542-f1d6-11e5-97bb-e43e67e4686e.png)\r\n![2016-03-24 15 27 45](https://cloud.githubusercontent.com/assets/5518/14011063/4caa8326-f1d6-11e5-9161-ef93afe07465.png)\r\n![2016-03-24 15 27 49](https://cloud.githubusercontent.com/assets/5518/14011061/4ca57bf6-f1d6-11e5-8343-291d7e92bf3c.png)\r\n",
  "google": "UA-9745660-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}